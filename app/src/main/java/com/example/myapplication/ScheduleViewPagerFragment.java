package com.example.myapplication;import android.app.Activity;import android.os.Bundle;import android.support.v4.app.Fragment;import android.support.v4.view.ViewPager;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import com.example.myapplication.Adapters.ScheduleViewPagerAdapter;import com.example.myapplication.Model.SchoolDay;import com.example.myapplication.Model.SubGroupEnum;import com.example.myapplication.Model.WeekNumberEnum;import java.util.List;/** * ViewPager для отображения списка занятий */public class ScheduleViewPagerFragment extends Fragment {    private static final String TAG = "schedViewPager";    private ViewPager scheduleViewPager;    private List<SchoolDay> allWeekSchedules;    private OnFragmentInteractionListener baseActivity;    private static final int PAGE_LEFT = 0;    private static final int PAGE_MIDDLE = 1;    private static final int PAGE_RIGHT = 2;    private Integer currentMiddleIndex;    private Integer currentSelectedIndex;    private WeekNumberEnum selectedWeekNumber = WeekNumberEnum.ALL;    private SubGroupEnum selectedSubGroup = SubGroupEnum.ENTIRE_GROUP;    /**     * ViewPager для отображения списка занятий     */    public ScheduleViewPagerFragment() {        // Required empty public constructor    }    /**     * Статический метод для создания экземпляра фрагмента     * @return     */    public static ScheduleViewPagerFragment newInstance() {        return new ScheduleViewPagerFragment();    }    /**     * Метод создает View     * @param inflater Объект с помощью которого создается View     * @param container Родительское View     * @param savedInstanceState Сохраненное состояние фрагмента     * @return Возвращает созданное View     */    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        // Inflate the layout for this fragment        View view = inflater.inflate(R.layout.fragment_schedule_view_pager, container, false);        scheduleViewPager = (ViewPager) view.findViewById(R.id.scheduleViewPager);        scheduleViewPager.addOnPageChangeListener(new ViewPagerChangeListener());        updateFiltersForViewPager(getCurrentMiddleIndex(), getSelectedWeekNumber(), getSelectedSubGroup());        return view;    }    /**     * Метод настраивает ViewPager для отображения списка занятий используя переданные параметры     * @param dayPosition выбранный день недели     * @param weekNumber выбранная учебная неделя     * @param subGroup выбранная подгруппа     * @return null     */    public Void updateFiltersForViewPager(Integer dayPosition, WeekNumberEnum weekNumber, SubGroupEnum subGroup) {        if(getActivity() != null) {            selectedWeekNumber = weekNumber;            selectedSubGroup = subGroup;            ScheduleViewPagerAdapter adapter = new ScheduleViewPagerAdapter(getActivity().getSupportFragmentManager());            adapter.setAllSchedules(getAllWeekSchedules());            currentMiddleIndex = dayPosition;            adapter.setSelectedDayPosition(dayPosition);            adapter.setSelectedWeekNumber(weekNumber);            adapter.setSelectedSubGroupNumber(subGroup);            scheduleViewPager.setAdapter(adapter);            scheduleViewPager.setCurrentItem(PAGE_MIDDLE);        }        return null;    }    /**     * Метод вызывается при присоединении фрагмента к активити     * @param activity Активити к которой присоединяется фрагмент     */    @Override    public void onAttach(Activity activity) {        super.onAttach(activity);        try {            baseActivity = (OnFragmentInteractionListener) activity;        } catch (ClassCastException e) {            Log.v(TAG, e.getMessage(), e);            throw new ClassCastException(activity.toString()                    + " must implement OnFragmentInteractionListener");        }    }    /**     * Метод вызывается при отсоединении фрагмента от активити     */    @Override    public void onDetach() {        super.onDetach();        baseActivity = null;    }    public List<SchoolDay> getAllWeekSchedules() {        return allWeekSchedules;    }    public void setAllWeekSchedules(List<SchoolDay> allWeekSchedules) {        this.allWeekSchedules = allWeekSchedules;    }    public Integer getCurrentMiddleIndex() {        return currentMiddleIndex;    }    public void setCurrentMiddleIndex(Integer currentMiddleIndex) {        this.currentMiddleIndex = currentMiddleIndex;    }    public SubGroupEnum getSelectedSubGroup() {        return selectedSubGroup;    }    public void setSelectedSubGroup(SubGroupEnum selectedSubGroup) {        this.selectedSubGroup = selectedSubGroup;    }    public WeekNumberEnum getSelectedWeekNumber() {        return selectedWeekNumber;    }    public void setSelectedWeekNumber(WeekNumberEnum selectedWeekNumber) {        this.selectedWeekNumber = selectedWeekNumber;    }    /**     * Обработчик событий во ViewPager     */    private class ViewPagerChangeListener implements ViewPager.OnPageChangeListener {        /**         * Метод вызывается когда текущая страница скролится         * @param position позиция текущей отображаемой страницы         * @param positionOffset значение от [0, 1) отображающее смещение         * @param positionOffsetPixels смещение в пикселях         */        @Override        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {            //nothing to do        }        /**         * Вызывается когда пользователь делает свап влево или вправо         * @param position позиция новой выбранной страницы во ViewPager         */        @Override        public void onPageSelected(int position) {            currentSelectedIndex = position;            if (currentSelectedIndex == PAGE_LEFT) {                if(currentMiddleIndex == 0){                    currentMiddleIndex = 6;                } else {                    currentMiddleIndex--;                }                // user swiped to right direction            } else if (currentSelectedIndex == PAGE_RIGHT) {                if(currentMiddleIndex == 6){                    currentMiddleIndex = 0;                } else{                    currentMiddleIndex++;                }            }            baseActivity.onChangeDay(currentMiddleIndex);        }        /**         * Вызывается при изменении состояния ViewPager         * @param state новое состояние         */        @Override        public void onPageScrollStateChanged(int state) {            if (state == ViewPager.SCROLL_STATE_IDLE && currentSelectedIndex != null) {                updateFiltersForViewPager(currentMiddleIndex, selectedWeekNumber, selectedSubGroup);            }        }    }}